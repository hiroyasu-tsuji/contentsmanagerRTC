// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "SpeechContent.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



Content::SpeechContent_ptr Content::SpeechContent_Helper::_nil() {
  return ::Content::SpeechContent::_nil();
}

::CORBA::Boolean Content::SpeechContent_Helper::is_nil(::Content::SpeechContent_ptr p) {
  return ::CORBA::is_nil(p);

}

void Content::SpeechContent_Helper::release(::Content::SpeechContent_ptr p) {
  ::CORBA::release(p);
}

void Content::SpeechContent_Helper::marshalObjRef(::Content::SpeechContent_ptr obj, cdrStream& s) {
  ::Content::SpeechContent::_marshalObjRef(obj, s);
}

Content::SpeechContent_ptr Content::SpeechContent_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Content::SpeechContent::_unmarshalObjRef(s);
}

void Content::SpeechContent_Helper::duplicate(::Content::SpeechContent_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Content::SpeechContent_ptr
Content::SpeechContent::_duplicate(::Content::SpeechContent_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Content::SpeechContent_ptr
Content::SpeechContent::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Content::SpeechContent_ptr
Content::SpeechContent::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Content::SpeechContent_ptr
Content::SpeechContent::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_SpeechContent _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_SpeechContent* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_SpeechContent;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Content::SpeechContent::_PD_repoId = "IDL:Content/SpeechContent:1.0";


Content::_objref_SpeechContent::~_objref_SpeechContent() {
  
}


Content::_objref_SpeechContent::_objref_SpeechContent(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Content::SpeechContent::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Content::_objref_SpeechContent::_ptrToObjRef(const char* id)
{
  if( id == ::Content::SpeechContent::_PD_repoId )
    return (::Content::SpeechContent_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Content::SpeechContent::_PD_repoId) )
    return (::Content::SpeechContent_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cstring_i_cdouble
class _0RL_cd_abd6f46e2e671c12_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_abd6f46e2e671c12_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Double arg_1;
};

void _0RL_cd_abd6f46e2e671c12_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;

}

void _0RL_cd_abd6f46e2e671c12_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Double&)arg_1 <<= _n;

}

const char* const _0RL_cd_abd6f46e2e671c12_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_abd6f46e2e671c12_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_abd6f46e2e671c12_00000000* tcd = (_0RL_cd_abd6f46e2e671c12_00000000*)cd;
  Content::_impl_SpeechContent* impl = (Content::_impl_SpeechContent*) svnt->_ptrToInterface(Content::SpeechContent::_PD_repoId);
  impl->read(tcd->arg_0, tcd->arg_1);


}

void Content::_objref_SpeechContent::read(const char* contentdata, ::CORBA::Double priority)
{
  _0RL_cd_abd6f46e2e671c12_00000000 _call_desc(_0RL_lcfn_abd6f46e2e671c12_10000000, "read", 5);
  _call_desc.arg_0 = contentdata;
  _call_desc.arg_1 = priority;

  _invoke(_call_desc);



}
Content::_pof_SpeechContent::~_pof_SpeechContent() {}


omniObjRef*
Content::_pof_SpeechContent::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Content::_objref_SpeechContent(ior, id);
}


::CORBA::Boolean
Content::_pof_SpeechContent::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Content::SpeechContent::_PD_repoId) )
    return 1;
  
  return 0;
}

const Content::_pof_SpeechContent _the_pof_Content_mSpeechContent;

Content::_impl_SpeechContent::~_impl_SpeechContent() {}


::CORBA::Boolean
Content::_impl_SpeechContent::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "read") ) {

    _0RL_cd_abd6f46e2e671c12_00000000 _call_desc(_0RL_lcfn_abd6f46e2e671c12_10000000, "read", 5, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Content::_impl_SpeechContent::_ptrToInterface(const char* id)
{
  if( id == ::Content::SpeechContent::_PD_repoId )
    return (::Content::_impl_SpeechContent*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Content::SpeechContent::_PD_repoId) )
    return (::Content::_impl_SpeechContent*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Content::_impl_SpeechContent::_mostDerivedRepoId()
{
  return ::Content::SpeechContent::_PD_repoId;
}

POA_Content::SpeechContent::~SpeechContent() {}

